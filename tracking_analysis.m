%% ------------------------- SUMMARY --------------------------------------
% This code extracts speed measurements from tracking data (x y t ID)
% generated by the TrackMate PlugIn in ImageJ. These files were exported as
% .csv files, converted to .xls and then imported into Matlab and saved as
% a table.

% Inputs: Imported table, saved with variable name assigned by user to be
% recognized as the variable "data"

% Outputs: 
% 1) mean_vel; vector of length equal to the number of tracks that yields
% the mean speed for each individual track

% 2) mean_final; the mean of all track speed means (the mean of all
% mean_vel vectors)

%3) per_above_thresh; the percentage of tracks above some defined speed
%threshold defined by the user as 'vel_thresh'

%% ---------------------------SPEED CALCULATIONS --------------------------

data = Fj_001; % assign "data" to be the variable name of the imported .csv/.xls file as variable type 'table'

data_concat = [table2array(data(:,11)), table2array(data(:,10)),...
    table2array(data(:,12)), table2array(data(:,13)),...
    table2array(data(:,1))/60]; % extract [frame ID x y t], convert from sec to mins

track_IDs = table2array(unique([data(:,10)])); % number  of unique tracks

mean_vel = []; % initialize

% Loop thorugh all tracks and calculate speeds
    for i = 1:length(track_IDs(~isnan(track_IDs)))

        track_i = data_concat(data_concat(:,2) == track_IDs(i),:); % 

        for j = 2:size(track_i,1)
            Xvel_i = (track_i(j,3) - track_i(j-1,3))/track_i(j,5); % (x_current - x_prev)/dt (in um/min)
            Yvel_i = (track_i(j,4) - track_i(j-1,4))/track_i(j,5);
            track_i(j,6) = abs(Xvel_i); % x_vel
            track_i(j,7) = abs(Yvel_i); % y_vel
            track_i(j,8) = sqrt(Xvel_i^2 + Yvel_i^2); % total vel
        end
        
        mean_vel(i,:) = mean(track_i(j,8))/1.5; % notably, the microscope zoom was incorrectly assigned in metadata thus 
                                                % need to divide the velocity values by 1.5 to gert correct values

    end

%x = nonzeros(mean_vel); % if issues with excess zeros or the time isnt correct (zorbing project)

mean_final = mean(mean_vel)

% count percentage of cells > 10 um/min (or some other velocity threshold
% defined by vel_thresh
vel_thresh = .5; % units of Âµm/min, assigned by user
perc_above_thresh = 100*length(find(mean_vel > vel_thresh))/length(mean_vel);

